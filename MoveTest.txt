const int motorPin1 = 3;   // Motor 1 control pin
const int motorPin2 = 5;   // Motor 1 control pin
const int motorPin3 = 6;   // Motor 2 control pin
const int motorPin4 = 9;   // Motor 2 control pin

const int sensorCount = 8; // Number of sensors in your analog line sensor
const int sensorPins[sensorCount] = {A0, A1, A2, A3, A4, A5, A6, A7}; // Analog sensor pins

double Kp = 0.1;  // Proportional gain
double Ki = 0.01; // Integral gain
double Kd = 0.05; // Derivative gain

int lastError = 0;
int integral = 0;

void setup() {
  pinMode(motorPin1, OUTPUT);
  pinMode(motorPin2, OUTPUT);
  pinMode(motorPin3, OUTPUT);
  pinMode(motorPin4, OUTPUT);
   for(int i = 0; i < sensorCount; i++){
     pinMode(sensorPins[i], INPUT);
}
  Serial.begin(9600); // Initialize serial communication for debugging
}

void loop() {
  int sensorValues[sensorCount];

  // Read sensor values
  for (int i = 0; i < sensorCount; i++) {
    sensorValues[i] = analogRead(sensorPins[i]);
  }
   Serial.print("Sensor Values: ");
  for (int i = 0; i < sensorCount; ++i) {
    Serial.print(sensorValues[i]);
    Serial.print(" ");
  }
  Serial.println();
  // line following logic goes here
  int error = calculateError(sensorValues);
if(sensorValues[A3] > 700 && sensorValues[A4] > 700){
      moveForward();
  }else if(sensorValues[A0] > 700 && sensorValues[A1] > 700){
      moveLeft();
  }else if(sensorValues[A6] > 700 && sensorValues[A7] > 700){
      moveRight();
  }else{
      stopRobot();
    }
  // Calculate PID terms
  int proportional = error;
  integral += error;
  int derivative = error - lastError;

  // Calculate motor speeds using PID terms
  int motorSpeed1 = Kp * proportional + Ki * integral + Kd * derivative;
  int motorSpeed2 = Kp * proportional + Ki * integral + Kd * derivative;

  // Apply motor speeds (you'll need to adjust the direction and motor control logic)
  // Example: Move motors forward
  analogWrite(motorPin1, motorSpeed1);
  digitalWrite(motorPin2, LOW);
  analogWrite(motorPin3, motorSpeed2);
  digitalWrite(motorPin4, LOW);

  // Update last error for the next iteration
  lastError = error;

  delay(200); // Adjust delay based on your requirements
}

int calculateError(int sensorValues[]) {
  // Implement your logic to calculate the error based on the sensor values
   if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] > 700) return 7;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] > 700 && sensorValues[7] > 700) return 6;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] > 700 && sensorValues[7] < 700) return 5;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] > 700 && sensorValues[6] > 700 && sensorValues[7] < 700) return 4;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] > 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return 3;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] > 700 && sensorValues[5] > 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return 2;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] > 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return 1;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] > 700 && sensorValues[4] > 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return 0;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] < 700 && sensorValues[3] > 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return -1;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] > 700 && sensorValues[3] > 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return -2;
  else if(sensorValues[0] < 700 && sensorValues[1] < 700 && sensorValues[2] > 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return -3;
  else if(sensorValues[0] < 700 && sensorValues[1] > 700 && sensorValues[2] > 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return -4;
  else if(sensorValues[0] < 700 && sensorValues[1] > 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return -5;
  else if(sensorValues[0] > 700 && sensorValues[1] > 700 && sensorValues[2] < 700 && sensorValues[3] < 700 && sensorValues[4] < 700 && sensorValues[5] < 700 && sensorValues[6] < 700 && sensorValues[7] < 700) return -6;
  else return -7;
   
}
  // For testing, you can print sensor values to Serial Monitor
 

  // Example: Calculate error based on the middle sensors


void moveForward() {
  // Your existing motor control logic goes here
  // Example: Move forward
  analogWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, LOW);
  analogWrite(motorPin3, HIGH);
  digitalWrite(motorPin4, LOW);
  delay(20); //Adjust the delay for the desired speed
}

void stopRobot() {
  // Stop the robot
  digitalWrite(motorPin1, LOW);
  digitalWrite(motorPin2, LOW);
  digitalWrite(motorPin3, LOW);
  digitalWrite(motorPin4, LOW);
}
void moveRight() {
  // Implement your right turn logic here
  analogWrite(motorPin1, HIGH);
  digitalWrite(motorPin2, LOW);
  analogWrite(motorPin3, LOW);  // Stop the right motor
  digitalWrite(motorPin4, HIGH);
}

void moveLeft() {
  // Implement your left turn logic here
  analogWrite(motorPin1, LOW);  // Stop the left motor
  digitalWrite(motorPin2, HIGH);
  analogWrite(motorPin3, HIGH);
  digitalWrite(motorPin4, LOW);
}
